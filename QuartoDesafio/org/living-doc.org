#+AUTHOR: BuddhiLW
#+STARTUP: latexpreview
#+PROPERTY: header-args:js :tangle ../js/prompt-logic.js :mkdirp yes

* JS

** Game initializer
#+begin_src js :tangle ../js/prompt-logic.js
  var initGame = () => filterCards(howMany());
#+end_src

** How many cards?

Prompt the player asking for inputs

#+begin_src js :tangle ../js/prompt-logic.js
  var howMany = () => prompt("With how many cards you wish to play with?");
#+end_src

** Filter condition

If the card is even and more than four and less than 14

#+begin_src js :tangle ../js/prompt-logic.js
  var filterCards = number =>
      (number % 2 === 0 && (number > 4 && number < 14))
      ? createCards(number)
      : initGame();
#+end_src

** Create Cards

*** Helper funtions
#+begin_src js :tangle ../js/prompt-logic.js
  let li = document.createElement('li');
  var ul = querier('ul');

  var querier = e => document.querySelector(e);
  var populateWith = e => li => e.appendChild(li);
#+end_src

*** Iteration
#+begin_src js :tangle ../js/prompt-logic.js
var populate = number => function(number){
    for (var i = 0; i < number; i++) {
        return populateWith(ul)(li2);
    }
};
#+end_src

*** Call
#+begin_src js :tangle ../js/prompt-logic.js
  var createCards = number => populate(number);
#+end_src

* HTML

** Head
#+begin_src html :tangle ../html/index.html :mkdirp yes
  <!DOCTYPE html>
  <html lang="en">

  <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="preconnect" href="https://fonts.gstatic.com">
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap" rel="stylesheet">
      <link rel="stylesheet" href="../css/reset.css">
      <link rel="stylesheet" href="../css/layout.css">
      <!-- <link rel="stylesheet" href="../css/cards.css"> -->
      <!-- <link rel="stylesheet" href="../css/dynamic.css"> -->
      <title>Parrots</title>
  </head>
#+end_src

** Body
#+begin_src html :tangle ../html/index.html :mkdirp yes
  <body>
      <h1 class="center">TAROT CARD GAME</h1>
      <ul>
      </ul>

  </body>

  </html>
#+end_src

* CSS
** Reset
#+begin_src css :tangle ../css/reset.css :mkdirp yes
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
#+end_src

** Layout
*** ul

There will be a division of rows compatible with how many cards the player chooses to play with.
Each row will have cards. Therefore, the layout must follow:

#+begin_src css :tangle ../css/layout.css :mkdirp yes
  ul {
      display: flex;
      flex-direction: row;
  }
#+end_src

*** li

Each listed item (li) will have an image containing the parrot

#+begin_src css :tangle ../css/layout.css :mkdirp yes
  li {
      width: 117px;
      height: 146px;
      background-image: url("../img/laughting-buddha-fit-nobg.png");
      background-color: #fdde2d70;
      border: 1px solid #AA0000;
      border-radius: 10px;
      margin: 17px;
  }
#+end_src

**** first margin (~10 view)
#+begin_src css :tangle ../css/layout.css :mkdirp yes
  ul li:first-of-type{
      margin-left: 10%;
  }
#+end_src

*** Background (body)
Let's change the background to a redish tone

#+begin_src css :tangle ../css/layout.css :mkdirp yes
  body {
      background-color: #AA000d30;
  }
#+end_src

*** h1
Now, we will change the heading to the desired font and size

#+begin_src css :tangle ../css/layout.css :mkdirp yes
  @font-face{
      font-family: 'Kramer';
      src: url('../font/KramerRegular.ttf');
  }

  h1 {
      font-family: Roboto;
      font-size: 56px;
      font-weight: 700;
      color: #F6C700;
      text-shadow: #AA000d60 0px 0px 5px;
  }

  h1::first-letter{
      font-size:125%;
      font-family: Kramer;
      color: #AA000d60;
      text-shadow: #F6C700 1px 1px 15px;
  }

  .center {
      box-sizing: border-box;
      text-align: center;
      margin: 40px auto 47px auto;
  }
#+end_src

** Mobile adjustment

#+begin_src css :tangle ../css/layout.css :mkdirp yes
  @media screen and (max-width: 335px){
      ul {
          display: flex;
          flex-direction: column;
          align-items: center;
      }
  }
#+end_src

